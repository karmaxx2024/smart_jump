import pygame  # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Pygame –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π –∏ —Å–æ–±—ã—Ç–∏—è–º–∏
from settings import screen, screen_width, screen_height, PLAYER_IMAGE, SOUND_JUMP, jump_speed, gravity  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞, —Ü–≤–µ—Ç–∞ –∏ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
from game_platform import platforms, check_collision  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π)

class Player(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.image.load(PLAYER_IMAGE).convert_alpha()
        self.image = pygame.transform.scale(self.image, (50, 50))
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.vel_y = 0
        self.vel_x = 0
        self.jump_sound = pygame.mixer.Sound(SOUND_JUMP)
        self.jump_sound.set_volume(0.5)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ —Å—Ç–æ—è–ª –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        self.check_initial_platform()
        print(f"‚úÖ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω –Ω–∞ ({self.rect.x}, {self.rect.y})")

    def check_initial_platform(self):
        for platform in platforms:
            if platform[1] >= screen_height - 200:
                self.rect.y = platform[1] - self.rect.height
                print(f"‚úÖ –ò–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: ({self.rect.x}, {self.rect.y})")
                return

    def move(self, keys):
        if keys[pygame.K_LEFT]:
            self.vel_x = -4
            print("‚¨ÖÔ∏è –ò–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è –≤–ª–µ–≤–æ")
        elif keys[pygame.K_RIGHT]:
            self.vel_x = 4
            print("‚û°Ô∏è –ò–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ")
        else:
            self.vel_x = 0

    def apply_gravity(self):
        self.vel_y += gravity
        self.rect.y += self.vel_y

    def check_collision(self):
        platform_collided = check_collision(self.rect)
        if platform_collided and self.vel_y >= 0:
            self.rect.y = platform_collided.top - self.rect.height
            self.vel_y = jump_speed  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä—ã–∂–æ–∫
            print(f"üîÑ –ò–≥—Ä–æ–∫ –ø—Ä—ã–≥–Ω—É–ª —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ ({self.rect.x}, {self.rect.y})")

    def update(self, keys):
        self.move(keys)
        self.apply_gravity()
        self.check_collision()

        self.rect.x += self.vel_x

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.right > screen_width:
            self.rect.right = screen_width

        print(f"üìç –ò–≥—Ä–æ–∫ –Ω–∞ ({self.rect.x}, {self.rect.y})")

    def draw(self):
        screen.blit(self.image, self.rect)
